*************
Step-1

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927


*************
Step-2

echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list


*************
Step-3
sudo apt-get update
**************
Step-4
sudo apt-get install -y mongodb-org

**************
Step-5

sudo systemctl start mongod

*************
Step-6
sudo systemctl status mongod
*************
Step-7
sudo service mongod status
sudo service mongod restart


**************

Mongo db Tutorial
MongoDB is a cross-platform, document oriented database that provides, high performance, high availability, and easy scalability. MongoDB works on concept of collection and document
-- Mongodb is written in C++
Collection-

Document-

*****

Database
Database is a physical container for collections. Each database gets its own set of files on the file system. A single MongoDB server typically has multiple databases.

Collection
Collection is a group of MongoDB documents. It is the equivalent of an RDBMS table. A collection exists within a single database. Collections do not enforce a schema. Documents within a collection can have different fields. Typically, all documents in a collection are of similar or related purpose.

Document
A document is a set of key-value pairs. Documents have dynamic schema. Dynamic schema means that documents in the same collection do not need to have the same set of fields or structure, and common fields in a collection's documents may hold different types of data.
RDBMS 	      MongoDB
Database 	Database
Table 	      Collection
Tuple/Row 	Document
column 	Field
Table Join 	Embedded Documents

***********


in MongoDB, there is no concept of relationship.

********
Advantages of MongoDB over RDBMS

    Schema less − MongoDB is a document database in which one collection holds different documents. Number of fields, content and size of the document can differ from one document to another.

    Structure of a single object is clear.

    No complex joins.

    Deep query-ability. MongoDB supports dynamic queries on documents using a document-based query language that's nearly as powerful as SQL.

    Tuning.

    Ease of scale-out − MongoDB is easy to scale.

    Conversion/mapping of application objects to database objects not needed.

    Uses internal memory for storing the (windowed) working set, enabling faster access of data.
**************
Why Use MongoDB?

    Document Oriented Storage − Data is stored in the form of JSON style documents.

    Index on any attribute

    Replication and high availability

    Auto-sharding

    Rich queries

    Fast in-place updates

***********
Where to Use MongoDB?

    Big Data
    Content Management and Delivery
    Mobile and Social Infrastructure
    User Data Management
    Data Hub
*********
Mongo db commands
To get stats about MongoDB server, type the command db.stats() in MongoDB client.
-- db.stats()
{
	"db" : "test",
	"collections" : 0,
	"objects" : 0,
	"avgObjSize" : 0,
	"dataSize" : 0,
	"storageSize" : 0,
	"numExtents" : 0,
	"indexes" : 0,
	"indexSize" : 0,
	"fileSize" : 0,
	"ok" : 1
}


--
********
Data in MongoDB has a flexible schema.documents in the same collection. They do not need to have the same set of fields or structure, and common fields in a collection’s documents may hold different types of data.
**********

create a db in mongodb

1- show dbs;
2-use test;
3- db.test.insert({"name":"Abhi"})


drop a database

MongoDB db.dropDatabase() command is used to drop a existing database.
Syntax

Basic syntax of dropDatabase() command is as follows −

1-db.dropDatabase()

This will delete the selected database. If you have not selected any database, then it will delete default 'test' database.

To create collection
1-show databases
2- use test
3-db.createCollection("first")
show collections
(used to show all collections)

********
The following example shows the syntax of createCollection() method with few important options −

>db.createCollection("mycol", { capped : true, autoIndexId : true, size : 
   6142800, max : 10000 } )
{ "ok" : 1 }
>
**********
In MongoDB, you don't need to create collection. MongoDB creates collection automatically, when you insert some document.

>db.tutorialspoint.insert({"name" : "tutorialspoint"})
>show collections
mycol
mycollection
system.indexes
tutorialspoint
>
**********
The drop() Method

MongoDB's db.collection.drop() is used to drop a collection from the database.
Syntax

Basic syntax of drop() command is as follows −

db.COLLECTION_NAME.drop()

***
> show databases
local  0.000GB
test   0.000GB
> use test
switched to db test
> show collections
first
test
> 
> db.test.drop()
true
> show collections
first
> 
***

******************
MongoDB supports many datatypes. Some of them are −

    String − This is the most commonly used datatype to store the data. String in MongoDB must be UTF-8 valid.

    Integer − This type is used to store a numerical value. Integer can be 32 bit or 64 bit depending upon your server.

    Boolean − This type is used to store a boolean (true/ false) value.

    Double − This type is used to store floating point values.

    Min/ Max keys − This type is used to compare a value against the lowest and highest BSON elements.

    Arrays − This type is used to store arrays or list or multiple values into one key.

    Timestamp − ctimestamp. This can be handy for recording when a document has been modified or added.

    Object − This datatype is used for embedded documents.

    Null − This type is used to store a Null value.

    Symbol − This datatype is used identically to a string; however, it's generally reserved for languages that use a specific symbol type.

    Date − This datatype is used to store the current date or time in UNIX time format. You can specify your own date time by creating object of Date and passing day, month, year into it.

    Object ID − This datatype is used to store the document’s ID.

    Binary data − This datatype is used to store binary data.

    Code − This datatype is used to store JavaScript code into the document.

    Regular expression − This datatype is used to store regular expression.



*******************
The insert() Method

To insert data into MongoDB collection, you need to use MongoDB's insert() or save() method.

Syntax

The basic syntax of insert() command is as follows −

>db.COLLECTION_NAME.insert(document)

Example

>db.mycol.insert({
   _id: ObjectId(7df78ad8902c),
   title: 'MongoDB Overview', 
   description: 'MongoDB is no sql database',
   by: 'tutorials point',
   url: 'http://www.tutorialspoint.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100
})


db.first.insert({title:'Mongodb' })
WriteResult({ "nInserted" : 1 })
> db.first.insert({_id:'123',title:'Mongodb' })
WriteResult({ "nInserted" : 1 })


***********
In the inserted document, if we don't specify the _id parameter, then MongoDB assigns a unique ObjectId for this document.

_id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided as follows −

_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 
   3 bytes incrementer)

To insert multiple documents in a single query, you can pass an array of documents in insert() command.
Example

>db.post.insert([
   {
      title: 'MongoDB Overview', 
      description: 'MongoDB is no sql database',
      by: 'tutorials point',
      url: 'http://www.tutorialspoint.com',
      tags: ['mongodb', 'database', 'NoSQL'],
      likes: 100
   },
	
   {
      title: 'NoSQL Database', 
      description: "NoSQL database doesn't have tables",
      by: 'tutorials point',
      url: 'http://www.tutorialspoint.com',
      tags: ['mongodb', 'database', 'NoSQL'],
      likes: 20, 
      comments: [	
         {
            user:'user1',
            message: 'My first comment',
            dateCreated: new Date(2013,11,10,2,35),
            like: 0 
         }
      ]
   }
])

To insert the document you can use db.post.save(document) also. If you don't specify _id in the document then save() method will work same as insert() method. If you specify _id then it will replace whole data of document containing _id as specified in save() method.




**********
The find() Method

To query data from MongoDB collection, you need to use MongoDB's find() method.
Syntax

The basic syntax of find() method is as follows −

>db.COLLECTION_NAME.find()

find() method will display all the documents in a non-structured way.
The pretty() Method

To display the results in a formatted way, you can use pretty() method.
Syntax

>db.mycol.find().pretty()

Example

>db.mycol.find().pretty()
{
   "_id": ObjectId(7df78ad8902c),
   "title": "MongoDB Overview", 
   "description": "MongoDB is no sql database",
   "by": "tutorials point",
   "url": "http://www.tutorialspoint.com",
   "tags": ["mongodb", "database", "NoSQL"],
   "likes": "100"
}
>

Apart from find() method, there is findOne() method, that returns only one document.



***********






















